{"ast":null,"code":"import axios from \"axios\";\nexport default async function ajaxRegistroUsuario() {\n  let name = document.getElementsByName(\"name_user\")[0].value;\n  let username = document.getElementsByName(\"username_user\")[0].value;\n  let email = document.getElementsByName(\"email_user\")[0].value;\n  let telephone = document.getElementsByName(\"tel_user\")[0].value;\n  let password = document.getElementsByName(\"pssw_user\")[0].value;\n  if (validarDatos(name, username, email, telephone, password)) {\n    const response = await axios.post(\"http://localhost:3001/api/signin\", {\n      name,\n      username,\n      email,\n      telephone,\n      password\n    });\n\n    /*const response = await fetch(`http://localhost:3001/api/signin`,\r\n        {\r\n          method: 'POST',\r\n          body: JSON.stringify(body),\r\n        }\r\n    );*/\n\n    const respJson = await response.json();\n    console.log(JSON.stringify(respJson));\n    alert(\"\");\n    console.log(respJson);\n    if (respJson.success) {\n      document.cookie = \"nombre=\" + respJson.Data[0]['name'] + \";\" + \"correo=\" + respJson.Data[0]['email'] + \";\" + \"telefono=\" + respJson.Data[0]['telephone'] + \";\" + \"id=\" + respJson.Data[0]['id'] + \";\";\n      alert(\"Sesión iniciada correctamente\");\n      window.location.href = \"/\";\n      return;\n    } else {\n      alert(\"Usuario no encontrado\");\n    }\n  }\n}\nfunction validarDatos(nombreP, usuarioP, correoP, telefonoP, credencialP) {\n  let errores = 0;\n  let txt = \"\";\n  if (nombreP == \"\") {\n    txt = txt + \"El nombre está vacío.\\n\";\n    errores++;\n  } else {\n    let regexNombre = /^[a-zA-Z\\sñÁÉÍÓÚáéíóúàèìòùÀÈÌÒÙ]*$/;\n    if (!regexNombre.test(nombreP)) {\n      txt = txt + \"El nombre solo puede contener letras.\\n\";\n      errores++;\n    }\n    if (nombreP.length > 100) {\n      txt = txt + \"El nombre no puede tener más de 100 caracteres.\\n\";\n      errores++;\n    }\n  }\n  let regexNombreYCredencial = /^[a-zA-ZñÑ0-9¿?¡!@#$%&]*$/;\n  if (usuarioP == \"\") {\n    txt = txt + \"El usuario está vacío.\\n\";\n    errores++;\n  } else {\n    if (!regexNombreYCredencial.test(usuarioP)) {\n      txt = txt + \"El usuario solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\";\n      errores++;\n    }\n    if (usuarioP.length > 30) {\n      txt = txt + \"El usuario no puede tener más de 30 caracteres.\\n\";\n      errores++;\n    }\n  }\n  if (credencialP == \"\") {\n    txt = txt + \"La contraseña está vacía.\\n\";\n    errores++;\n  } else {\n    if (!regexNombreYCredencial.test(credencialP)) {\n      txt = txt + \"La contraseña solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\";\n      errores++;\n    }\n    if (credencialP.length > 30) {\n      txt = txt + \"La contraseña no puede tener más de 30 caracteres.\\n\";\n      errores++;\n    }\n  }\n  if (telefonoP == \"\") {\n    txt = txt + \"El campo de telefono está vacío.\\n\";\n    errores++;\n  } else {\n    let regexTelefono = /^[0-9]*$/;\n    if (!regexTelefono.test(telefonoP)) {\n      txt = txt + \"El telefono solo puede contener numeros.\\n\";\n      errores++;\n    }\n    if (telefonoP.length != 10) {\n      txt = txt + \"El telefono debe tener 10 caracteres.\\n\";\n      errores++;\n    }\n  }\n  if (correoP == \"\") {\n    txt = txt + \"El correo está vacío.\\n\";\n    errores++;\n  } else {\n    let regexCorreo = /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/;\n    if (!regexCorreo.test(correoP)) {\n      txt = txt + \"El correo ingreado es incorrecto.\\n\";\n      errores++;\n    }\n  }\n  if (errores == 0) return true;else {\n    alert(txt);\n    return false;\n  }\n}","map":{"version":3,"names":["axios","ajaxRegistroUsuario","name","document","getElementsByName","value","username","email","telephone","password","validarDatos","response","post","respJson","json","console","log","JSON","stringify","alert","success","cookie","Data","window","location","href","nombreP","usuarioP","correoP","telefonoP","credencialP","errores","txt","regexNombre","test","length","regexNombreYCredencial","regexTelefono","regexCorreo"],"sources":["C:/Users/Spicy/Documents/GitHub/Los_5_Furiosos-ParkiPay/src/Funciones/Crear_Usuario.js"],"sourcesContent":[" \r\nimport axios from \"axios\"\r\n\r\nexport default async function ajaxRegistroUsuario(){\r\n    let name = document.getElementsByName(\"name_user\")[0].value;\r\n    let username = document.getElementsByName(\"username_user\")[0].value;\r\n    let email = document.getElementsByName(\"email_user\")[0].value;\r\n    let telephone = document.getElementsByName(\"tel_user\")[0].value;\r\n    let password = document.getElementsByName(\"pssw_user\")[0].value;\r\n    \r\n    if(validarDatos(name,username,email,telephone,password)){\r\n        const response = await axios.post(\"http://localhost:3001/api/signin\", {\r\n            name,\r\n            username,\r\n            email,\r\n            telephone,\r\n            password\r\n        });\r\n\r\n        /*const response = await fetch(`http://localhost:3001/api/signin`,\r\n            {\r\n              method: 'POST',\r\n              body: JSON.stringify(body),\r\n            }\r\n        );*/\r\n        \r\n        const respJson = await response.json();\r\n        console.log(JSON.stringify(respJson));\r\n        alert(\"\");\r\n        console.log(respJson);\r\n        if (respJson.success) {\r\n            document.cookie = \"nombre=\" + respJson.Data[0]['name'] + \";\" + \"correo=\" + respJson.Data[0]['email'] + \";\" + \"telefono=\" + respJson.Data[0]['telephone']+ \";\" + \"id=\" + respJson.Data[0]['id'] + \";\";\r\n            alert(\"Sesión iniciada correctamente\");\r\n            window.location.href = \"/\";\r\n            return;\r\n        }else{\r\n            alert(\"Usuario no encontrado\");\r\n        }\r\n    } \r\n }\r\n\r\n function validarDatos(nombreP, usuarioP, correoP, telefonoP, credencialP){\r\n    let errores = 0;\r\n    let txt = \"\";\r\n    if(nombreP ==\"\"){\r\n        txt = txt + \"El nombre está vacío.\\n\";\r\n        errores++;\r\n    }else{\r\n        let regexNombre = /^[a-zA-Z\\sñÁÉÍÓÚáéíóúàèìòùÀÈÌÒÙ]*$/;\r\n        if(!regexNombre.test(nombreP)){\r\n            txt = txt + \"El nombre solo puede contener letras.\\n\"\r\n            errores++;\r\n        }\r\n        if(nombreP.length > 100){\r\n            txt = txt + \"El nombre no puede tener más de 100 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    let regexNombreYCredencial = /^[a-zA-ZñÑ0-9¿?¡!@#$%&]*$/;\r\n    if(usuarioP ==\"\"){\r\n        txt = txt + \"El usuario está vacío.\\n\";\r\n        errores++;\r\n    }else{  \r\n        if(!regexNombreYCredencial.test(usuarioP)){\r\n            txt = txt + \"El usuario solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\"\r\n            errores++;\r\n        }\r\n        if(usuarioP.length > 30){\r\n            txt = txt + \"El usuario no puede tener más de 30 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    if(credencialP ==\"\"){\r\n        txt = txt + \"La contraseña está vacía.\\n\";\r\n        errores++;\r\n    }else{  \r\n        if(!regexNombreYCredencial.test(credencialP)){\r\n            txt = txt + \"La contraseña solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\"\r\n            errores++;\r\n        }\r\n        if(credencialP.length > 30){\r\n            txt = txt + \"La contraseña no puede tener más de 30 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    if(telefonoP ==\"\"){\r\n        txt = txt + \"El campo de telefono está vacío.\\n\";\r\n        errores++;\r\n    }else{\r\n        let regexTelefono = /^[0-9]*$/;\r\n        if(!regexTelefono.test(telefonoP)){\r\n            txt = txt + \"El telefono solo puede contener numeros.\\n\"\r\n            errores++;\r\n        }\r\n        if(telefonoP.length != 10){\r\n            txt = txt + \"El telefono debe tener 10 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n    \r\n    if(correoP ==\"\"){\r\n        txt = txt + \"El correo está vacío.\\n\";\r\n        errores++;\r\n    }else{\r\n        let regexCorreo = /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/;\r\n        if(!regexCorreo.test(correoP)){\r\n            txt = txt + \"El correo ingreado es incorrecto.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    if (errores == 0)\r\n        return true;\r\n    else{\r\n        alert(txt)\r\n        return false;\r\n    }\r\n }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}