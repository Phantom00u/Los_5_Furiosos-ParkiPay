{"ast":null,"code":"export default async function ajaxRegistroUsuario() {\n  let nombreP = document.getElementsByName(\"name_user\")[0].value;\n  let usuarioP = document.getElementsByName(\"username_user\")[0].value;\n  let correoP = document.getElementsByName(\"email_user\")[0].value;\n  let telefonoP = document.getElementsByName(\"tel_user\")[0].value;\n  let credencialP = document.getElementsByName(\"pssw_user\")[0].value;\n  if (validarDatos(nombreP, usuarioP, correoP, telefonoP, credencialP)) {\n    var body = {\n      nombre: nombreP,\n      usuario: usuarioP,\n      correo: correoP,\n      telefono: telefonoP,\n      credencial: credencialP,\n      activo: true\n    };\n    console.log(JSON.stringify(body));\n    alert(\"\");\n    const response = await fetch(`http://localhost:3001/api/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    const respJson = await response.json();\n    console.log(JSON.stringify(respJson));\n    alert(\"\");\n    console.log(respJson);\n    if (respJson.success) {\n      document.cookie = \"nombre=\" + respJson.Data[0]['name'] + \";\" + \"correo=\" + respJson.Data[0]['email'] + \";\" + \"telefono=\" + respJson.Data[0]['telephone'] + \";\" + \"id=\" + respJson.Data[0]['id'] + \";\";\n      alert(\"Sesión iniciada correctamente\");\n      window.location.href = \"/\";\n      return;\n    } else {\n      alert(\"Usuario no encontrado\");\n    }\n  }\n}\nfunction validarDatos(nombreP, usuarioP, correoP, telefonoP, credencialP) {\n  let errores = 0;\n  let txt = \"\";\n  if (nombreP == \"\") {\n    txt = txt + \"El nombre está vacío.\\n\";\n    errores++;\n  } else {\n    let regexNombre = /^[a-zA-Z\\sñÁÉÍÓÚáéíóúàèìòùÀÈÌÒÙ]*$/;\n    if (!regexNombre.test(nombreP)) {\n      txt = txt + \"El nombre solo puede contener letras.\\n\";\n      errores++;\n    }\n    if (nombreP.length > 100) {\n      txt = txt + \"El nombre no puede tener más de 100 caracteres.\\n\";\n      errores++;\n    }\n  }\n  let regexNombreYCredencial = /^[a-zA-ZñÑ0-9¿?¡!@#$%&]*$/;\n  if (usuarioP == \"\") {\n    txt = txt + \"El usuario está vacío.\\n\";\n    errores++;\n  } else {\n    if (!regexNombreYCredencial.test(usuarioP)) {\n      txt = txt + \"El usuario solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\";\n      errores++;\n    }\n    if (usuarioP.length > 30) {\n      txt = txt + \"El usuario no puede tener más de 30 caracteres.\\n\";\n      errores++;\n    }\n  }\n  if (credencialP == \"\") {\n    txt = txt + \"La contraseña está vacía.\\n\";\n    errores++;\n  } else {\n    if (!regexNombreYCredencial.test(credencialP)) {\n      txt = txt + \"La contraseña solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\";\n      errores++;\n    }\n    if (credencialP.length > 30) {\n      txt = txt + \"La contraseña no puede tener más de 30 caracteres.\\n\";\n      errores++;\n    }\n  }\n  if (telefonoP == \"\") {\n    txt = txt + \"El campo de telefono está vacío.\\n\";\n    errores++;\n  } else {\n    let regexTelefono = /^[0-9]*$/;\n    if (!regexTelefono.test(telefonoP)) {\n      txt = txt + \"El telefono solo puede contener numeros.\\n\";\n      errores++;\n    }\n    if (telefonoP.length != 10) {\n      txt = txt + \"El telefono debe tener 10 caracteres.\\n\";\n      errores++;\n    }\n  }\n  if (correoP == \"\") {\n    txt = txt + \"El correo está vacío.\\n\";\n    errores++;\n  } else {\n    let regexCorreo = /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/;\n    if (!regexCorreo.test(correoP)) {\n      txt = txt + \"El correo ingreado es incorrecto.\\n\";\n      errores++;\n    }\n  }\n  if (errores == 0) return true;else {\n    alert(txt);\n    return false;\n  }\n}","map":{"version":3,"names":["ajaxRegistroUsuario","nombreP","document","getElementsByName","value","usuarioP","correoP","telefonoP","credencialP","validarDatos","body","nombre","usuario","correo","telefono","credencial","activo","console","log","JSON","stringify","alert","response","fetch","method","headers","respJson","json","success","cookie","Data","window","location","href","errores","txt","regexNombre","test","length","regexNombreYCredencial","regexTelefono","regexCorreo"],"sources":["C:/Users/Spicy/Documents/GitHub/Los_5_Furiosos-ParkiPay/src/Funciones/Crear_Usuario.js"],"sourcesContent":[" \r\nexport default async function ajaxRegistroUsuario(){\r\n    let nombreP = document.getElementsByName(\"name_user\")[0].value;\r\n    let usuarioP = document.getElementsByName(\"username_user\")[0].value;\r\n    let correoP = document.getElementsByName(\"email_user\")[0].value;\r\n    let telefonoP = document.getElementsByName(\"tel_user\")[0].value;\r\n    let credencialP = document.getElementsByName(\"pssw_user\")[0].value;\r\n    \r\n    if(validarDatos(nombreP,usuarioP,correoP,telefonoP,credencialP)){\r\n        var body = {\r\n            nombre: nombreP,\r\n            usuario: usuarioP,\r\n            correo: correoP,\r\n            telefono: telefonoP,\r\n            credencial: credencialP,\r\n            activo: true\r\n        }\r\n        console.log(JSON.stringify(body));\r\n        alert(\"\");\r\n        const response = await fetch(`http://localhost:3001/api/signin`,\r\n            {\r\n              method: 'POST',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify(body),\r\n            }\r\n        );\r\n        \r\n        const respJson = await response.json();\r\n        console.log(JSON.stringify(respJson));\r\n        alert(\"\");\r\n        console.log(respJson);\r\n        if (respJson.success) {\r\n            document.cookie = \"nombre=\" + respJson.Data[0]['name'] + \";\" + \"correo=\" + respJson.Data[0]['email'] + \";\" + \"telefono=\" + respJson.Data[0]['telephone']+ \";\" + \"id=\" + respJson.Data[0]['id'] + \";\";\r\n            alert(\"Sesión iniciada correctamente\");\r\n            window.location.href = \"/\";\r\n            return;\r\n        }else{\r\n            alert(\"Usuario no encontrado\");\r\n        }\r\n    } \r\n }\r\n\r\n function validarDatos(nombreP, usuarioP, correoP, telefonoP, credencialP){\r\n    let errores = 0;\r\n    let txt = \"\";\r\n    if(nombreP ==\"\"){\r\n        txt = txt + \"El nombre está vacío.\\n\";\r\n        errores++;\r\n    }else{\r\n        let regexNombre = /^[a-zA-Z\\sñÁÉÍÓÚáéíóúàèìòùÀÈÌÒÙ]*$/;\r\n        if(!regexNombre.test(nombreP)){\r\n            txt = txt + \"El nombre solo puede contener letras.\\n\"\r\n            errores++;\r\n        }\r\n        if(nombreP.length > 100){\r\n            txt = txt + \"El nombre no puede tener más de 100 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    let regexNombreYCredencial = /^[a-zA-ZñÑ0-9¿?¡!@#$%&]*$/;\r\n    if(usuarioP ==\"\"){\r\n        txt = txt + \"El usuario está vacío.\\n\";\r\n        errores++;\r\n    }else{  \r\n        if(!regexNombreYCredencial.test(usuarioP)){\r\n            txt = txt + \"El usuario solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\"\r\n            errores++;\r\n        }\r\n        if(usuarioP.length > 30){\r\n            txt = txt + \"El usuario no puede tener más de 30 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    if(credencialP ==\"\"){\r\n        txt = txt + \"La contraseña está vacía.\\n\";\r\n        errores++;\r\n    }else{  \r\n        if(!regexNombreYCredencial.test(credencialP)){\r\n            txt = txt + \"La contraseña solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\"\r\n            errores++;\r\n        }\r\n        if(credencialP.length > 30){\r\n            txt = txt + \"La contraseña no puede tener más de 30 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    if(telefonoP ==\"\"){\r\n        txt = txt + \"El campo de telefono está vacío.\\n\";\r\n        errores++;\r\n    }else{\r\n        let regexTelefono = /^[0-9]*$/;\r\n        if(!regexTelefono.test(telefonoP)){\r\n            txt = txt + \"El telefono solo puede contener numeros.\\n\"\r\n            errores++;\r\n        }\r\n        if(telefonoP.length != 10){\r\n            txt = txt + \"El telefono debe tener 10 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n    \r\n    if(correoP ==\"\"){\r\n        txt = txt + \"El correo está vacío.\\n\";\r\n        errores++;\r\n    }else{\r\n        let regexCorreo = /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/;\r\n        if(!regexCorreo.test(correoP)){\r\n            txt = txt + \"El correo ingreado es incorrecto.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    if (errores == 0)\r\n        return true;\r\n    else{\r\n        alert(txt)\r\n        return false;\r\n    }\r\n }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}