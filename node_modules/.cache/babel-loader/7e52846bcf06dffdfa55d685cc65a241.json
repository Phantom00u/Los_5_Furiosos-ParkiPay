{"ast":null,"code":"//import getCookie from '../Funciones/Funciones';\n\nexport default async function ajaxLogin() {\n  let correoP = document.getElementsByName(\"correo\")[0].value;\n  let credencialP = document.getElementById(\"contraseña\").value;\n  if (validarDatos(correoP, credencialP)) {\n    const response = await fetch(`http://localhost:3001/api/login?e=${correoP}&p=${credencialP}`);\n    const respJson = await response.json();\n    console.log(respJson);\n    if (respJson.success) {\n      document.cookie = \"nombre=\" + respJson.Data[0]['name'] + \";\" + \"correo=\" + respJson.Data[0]['email'] + \";\" + \"telefono=\" + respJson.Data[0]['telephone'] + \";\" + \"id=\" + respJson.Data[0]['id'] + \";\";\n\n      //console.log(getCookie(\"nombre\"));\n      //cookies.set(constants.CookieUserID, respJson.Data[0]._id, { path: '/' })\n      //cookies.set(constants.CookieIsLogedIn, true, { path: '/' })\n      //navigate('/home');\n      return;\n    }\n  }\n}\nfunction validarDatos(correoP, credencialP) {\n  let errores = 0;\n  let txt = \"\";\n  let regexNombreYCredencial = /^[a-zA-ZñÑ0-9¿?¡!@#$%&]*$/;\n  if (credencialP == \"\") {\n    txt = txt + \"La contraseña está vacía.\\n\";\n    errores++;\n  } else {\n    if (!regexNombreYCredencial.test(credencialP)) {\n      txt = txt + \"La contraseña solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\";\n      errores++;\n    }\n    if (credencialP.length > 30) {\n      txt = txt + \"La contraseña no puede tener más de 30 caracteres.\\n\";\n      errores++;\n    }\n  }\n  if (correoP == \"\") {\n    txt = txt + \"El correo está vacío.\\n\";\n    errores++;\n  } else {\n    let regexCorreo = /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/;\n    if (!regexCorreo.test(correoP)) {\n      txt = txt + \"El correo ingreado es incorrecto.\\n\";\n      errores++;\n    }\n  }\n  if (errores == 0) return true;else {\n    alert(txt);\n    return false;\n  }\n}","map":{"version":3,"names":["ajaxLogin","correoP","document","getElementsByName","value","credencialP","getElementById","validarDatos","response","fetch","respJson","json","console","log","success","cookie","Data","errores","txt","regexNombreYCredencial","test","length","regexCorreo","alert"],"sources":["C:/Users/Spicy/Documents/GitHub/Los_5_Furiosos-ParkiPay/src/Funciones/Login_Usuario.js"],"sourcesContent":["\r\n//import getCookie from '../Funciones/Funciones';\r\n\r\nexport default async function ajaxLogin(){\r\n    let correoP = document.getElementsByName(\"correo\")[0].value;\r\n    let credencialP = document.getElementById(\"contraseña\").value;\r\n    if(validarDatos(correoP,credencialP)){\r\n        const response = await fetch(`http://localhost:3001/api/login?e=${correoP}&p=${credencialP}`);\r\n        const respJson = await response.json();\r\n        console.log(respJson);\r\n        if (respJson.success) {\r\n            document.cookie = \"nombre=\" + respJson.Data[0]['name'] + \";\" + \"correo=\" + respJson.Data[0]['email'] + \";\" + \"telefono=\" + respJson.Data[0]['telephone']+ \";\" + \"id=\" + respJson.Data[0]['id'] + \";\";\r\n\r\n            //console.log(getCookie(\"nombre\"));\r\n          //cookies.set(constants.CookieUserID, respJson.Data[0]._id, { path: '/' })\r\n          //cookies.set(constants.CookieIsLogedIn, true, { path: '/' })\r\n          //navigate('/home');\r\n          return;\r\n        }\r\n    }\r\n }\r\n\r\n function validarDatos(correoP, credencialP){\r\n    let errores = 0;\r\n    let txt = \"\";\r\n    let regexNombreYCredencial = /^[a-zA-ZñÑ0-9¿?¡!@#$%&]*$/;\r\n    if(credencialP ==\"\"){\r\n        txt = txt + \"La contraseña está vacía.\\n\";\r\n        errores++;\r\n    }else{\r\n        if(!regexNombreYCredencial.test(credencialP)){\r\n            txt = txt + \"La contraseña solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\"\r\n            errores++;\r\n        }\r\n        if(credencialP.length > 30){\r\n            txt = txt + \"La contraseña no puede tener más de 30 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n\r\n    if(correoP ==\"\"){\r\n        txt = txt + \"El correo está vacío.\\n\";\r\n        errores++;\r\n    }else{\r\n        let regexCorreo = /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/;\r\n        if(!regexCorreo.test(correoP)){\r\n            txt = txt + \"El correo ingreado es incorrecto.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    if (errores == 0)\r\n        return true;\r\n    else{\r\n        alert(txt)\r\n        return false;\r\n    }\r\n }\r\n"],"mappings":"AACA;;AAEA,eAAe,eAAeA,SAAS,GAAE;EACrC,IAAIC,OAAO,GAAGC,QAAQ,CAACC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK;EAC3D,IAAIC,WAAW,GAAGH,QAAQ,CAACI,cAAc,CAAC,YAAY,CAAC,CAACF,KAAK;EAC7D,IAAGG,YAAY,CAACN,OAAO,EAACI,WAAW,CAAC,EAAC;IACjC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,qCAAoCR,OAAQ,MAAKI,WAAY,EAAC,CAAC;IAC7F,MAAMK,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IACtCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrB,IAAIA,QAAQ,CAACI,OAAO,EAAE;MAClBZ,QAAQ,CAACa,MAAM,GAAG,SAAS,GAAGL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,SAAS,GAAGN,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,WAAW,GAAGN,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAE,GAAG,GAAG,KAAK,GAAGN,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG;;MAEpM;MACF;MACA;MACA;MACA;IACF;EACJ;AACH;AAEA,SAAST,YAAY,CAACN,OAAO,EAAEI,WAAW,EAAC;EACxC,IAAIY,OAAO,GAAG,CAAC;EACf,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,sBAAsB,GAAG,2BAA2B;EACxD,IAAGd,WAAW,IAAG,EAAE,EAAC;IAChBa,GAAG,GAAGA,GAAG,GAAG,6BAA6B;IACzCD,OAAO,EAAE;EACb,CAAC,MAAI;IACD,IAAG,CAACE,sBAAsB,CAACC,IAAI,CAACf,WAAW,CAAC,EAAC;MACzCa,GAAG,GAAGA,GAAG,GAAG,0FAA0F;MACtGD,OAAO,EAAE;IACb;IACA,IAAGZ,WAAW,CAACgB,MAAM,GAAG,EAAE,EAAC;MACvBH,GAAG,GAAGA,GAAG,GAAG,sDAAsD;MAClED,OAAO,EAAE;IACb;EACJ;EAGA,IAAGhB,OAAO,IAAG,EAAE,EAAC;IACZiB,GAAG,GAAGA,GAAG,GAAG,yBAAyB;IACrCD,OAAO,EAAE;EACb,CAAC,MAAI;IACD,IAAIK,WAAW,GAAG,6BAA6B;IAC/C,IAAG,CAACA,WAAW,CAACF,IAAI,CAACnB,OAAO,CAAC,EAAC;MAC1BiB,GAAG,GAAGA,GAAG,GAAG,qCAAqC;MACjDD,OAAO,EAAE;IACb;EACJ;EAEA,IAAIA,OAAO,IAAI,CAAC,EACZ,OAAO,IAAI,CAAC,KACZ;IACAM,KAAK,CAACL,GAAG,CAAC;IACV,OAAO,KAAK;EAChB;AACH"},"metadata":{},"sourceType":"module"}