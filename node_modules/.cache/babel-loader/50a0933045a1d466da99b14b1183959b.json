{"ast":null,"code":"/*\r\nimport {$,jQuery} from 'jquery';\r\n\r\nexport default async function ajaxLogin(){\r\n    let correoP = document.getElementsByName(\"correo\")[0].value;\r\n    let credencialP = document.getElementsByName(\"contraseña\")[0].value;\r\n    if(validarDatos(correoP,credencialP)){\r\n        //const cookie = new Cookies();\r\n        const response = await fetch(`http://localhost/api/login?e=${correoP}&p=${credencialP}`);\r\n        const respJson = await response.json();\r\n        if (respJson.success) {\r\n          //cookies.set(constants.CookieUserID, respJson.Data[0]._id, { path: '/' })\r\n          //cookies.set(constants.CookieIsLogedIn, true, { path: '/' })\r\n          //navigate('/home');\r\n          return;\r\n        }\r\n    }\r\n }\r\n\r\n function validarDatos(correoP, credencialP){\r\n    let errores = 0;\r\n    let txt = \"\";\r\n    if(credencialP ==\"\"){\r\n        txt = txt + \"La contraseña está vacía.\\n\";\r\n        errores++;\r\n    }else{\r\n        if(!regexNombreYCredencial.test(credencialP)){\r\n            txt = txt + \"La contraseña solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\"\r\n            errores++;\r\n        }\r\n        if(credencialP.length > 30){\r\n            txt = txt + \"La contraseña no puede tener más de 30 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n\r\n    if(correoP ==\"\"){\r\n        txt = txt + \"El correo está vacío.\\n\";\r\n        errores++;\r\n    }else{\r\n        let regexCorreo = /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/;\r\n        if(!regexCorreo.test(correoP)){\r\n            txt = txt + \"El correo ingreado es incorrecto.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    if (errores == 0)\r\n        return true;\r\n    else{\r\n        alert(txt)\r\n        return false;\r\n    }\r\n }\r\n\r\n */","map":{"version":3,"names":[],"sources":["D:/Cositos/Proyects/ChiriWeb/src/Funciones/Login_Usuario.js"],"sourcesContent":["/*\r\nimport {$,jQuery} from 'jquery';\r\n\r\nexport default async function ajaxLogin(){\r\n    let correoP = document.getElementsByName(\"correo\")[0].value;\r\n    let credencialP = document.getElementsByName(\"contraseña\")[0].value;\r\n    if(validarDatos(correoP,credencialP)){\r\n        //const cookie = new Cookies();\r\n        const response = await fetch(`http://localhost/api/login?e=${correoP}&p=${credencialP}`);\r\n        const respJson = await response.json();\r\n        if (respJson.success) {\r\n          //cookies.set(constants.CookieUserID, respJson.Data[0]._id, { path: '/' })\r\n          //cookies.set(constants.CookieIsLogedIn, true, { path: '/' })\r\n          //navigate('/home');\r\n          return;\r\n        }\r\n    }\r\n }\r\n\r\n function validarDatos(correoP, credencialP){\r\n    let errores = 0;\r\n    let txt = \"\";\r\n    if(credencialP ==\"\"){\r\n        txt = txt + \"La contraseña está vacía.\\n\";\r\n        errores++;\r\n    }else{\r\n        if(!regexNombreYCredencial.test(credencialP)){\r\n            txt = txt + \"La contraseña solo puede contener letras, numeros o los siguientes simbolos ¿?¡!@#$%&.\\n\"\r\n            errores++;\r\n        }\r\n        if(credencialP.length > 30){\r\n            txt = txt + \"La contraseña no puede tener más de 30 caracteres.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n\r\n    if(correoP ==\"\"){\r\n        txt = txt + \"El correo está vacío.\\n\";\r\n        errores++;\r\n    }else{\r\n        let regexCorreo = /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/;\r\n        if(!regexCorreo.test(correoP)){\r\n            txt = txt + \"El correo ingreado es incorrecto.\\n\"\r\n            errores++;\r\n        }\r\n    }\r\n\r\n    if (errores == 0)\r\n        return true;\r\n    else{\r\n        alert(txt)\r\n        return false;\r\n    }\r\n }\r\n\r\n */\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}